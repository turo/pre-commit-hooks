######################
# Docker related hooks
- id: docker-lint
  name: "hadolint: Dockerfile linting"
  description: Runs hadolint Docker image to lint Dockerfiles
  language: docker_image
  # TODO: Extract this into a shared image?
  entry: hadolint/hadolint hadolint
  files: Dockerfile(.[-_a-zA-Z0-9]+)*
- id: docker-compose-lint
  name: "docker-compose: Check configuration"
  description: Runs docker-compose config to lint files
  language: docker_image
  entry: ghcr.io/turo/pre-commit-hooks/docker_compose:1.29.2
  files: docker-compose\.([-_a-zA-Z0-9]+\.)*y(a)?ml$
######################
# Golang related hooks
# These run in a container and have no other dependencies
- id: gocyclo
  name: "gocyclo: Code complexity check"
  description: "Runs `gocyclo`, checking function complexity"
  language: docker_image
  entry: --entrypoint gocyclo.sh ghcr.io/turo/pre-commit-hooks/gotools:1.0.0
  files: \.go$
- id: goimports
  name: "goimports: Missing and unused imports"
  description: "Runs `goimports` formatting code and cleaning imports"
  entry: --entrypoint goimports.sh ghcr.io/turo/pre-commit-hooks/gotools:1.0.0
  language: docker_image
  files: \.go$
- id: gofmt
  name: "gofmt: Style formatting"
  description: "Runs `gofmt` applying consistent style"
  entry: --entrypoint go-fmt.sh ghcr.io/turo/pre-commit-hooks/gotools:1.0.0
  language: docker_image
  files: '\.go$'
# Hooks that run locally only, and require golang
- id: go-test-unit
  name: "go-test-unit: Run tagged unit tests"
  description: "Runs `go test -tags=unit`, requires golang"
  entry: hooks/golang/go-test-unit.sh
  language: script
  files: '\.go$'
- id: go-build
  name: "go-build: Check compilation"
  description: "Runs `go build`, requires golang"
  entry: hooks/golang/go-build.sh
  language: 'script'
  files: '\.go$'
- id: go-mod-tidy
  name: "go-mod-tidy: Clean up go.mod and go.sum"
  description: "Runs `go mod tidy -v`, requires golang"
  entry: hooks/golang/go-mod-tidy.sh
  language: 'script'
  files: '\.go$'
- id: go-vet
  name: "go-vet: Linting checks not caught by compiler"
  description: "Runs `go vet`, requires golang"
  entry: hooks/golang/go-vet.sh
  language: 'script'
  files: '\.go$'
- id: go-fmt
  name: "go-fmt: Style formatting"
  description: "Runs `go fmt`, requires golang"
  entry: hooks/golang/go-fmt.sh
  language: 'script'
  files: '\.go$'
- id: golangci-lint
  name: "golangci-lint: Lint all the things"
  description: "Runs `golangci-lint`, a meta-linter which comprises many others"
  entry: hooks/golang/golangci-lint.sh
  language: script
  files: \.go$
  pass_filenames: false
- id: gomarkdoc
  name: "gomarkdoc: Create autogenerated documentation files"
  description: "Runs `gomarkdoc` to create a README.md for each package"
  entry: hooks/golang/gomarkdoc.sh
  language: script
  files: \.go$
######################
# Yaml related hooks
# These only have shell dependencies
- id: yaml-extension
  name: "Ensure yaml files use .yaml"
  description: "Errors if there are .yml files"
  entry: hooks/yaml/yaml-extension.sh
  language: script
  files: \.yml$
  ######################
# Yalc related hook
- id: yalc-check
  name: "Ensure no yalc dependencies are staged"
  description: "Errors if there are staged yalc dependencies"
  language: script
  entry: hooks/yalc/yalc-check.sh
  files: package\.json
# CSpell hook
- id: spell-check
  - repo: https://github.com/streetsidesoftware/cspell-cli
    rev: v8.3.0
    hooks:
      - id: spell-check
